buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.20.0'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.github.ben-manes.versions'

repositories {
    google()
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation 'com.intellij:annotations:12.0'
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'
    implementation 'joda-time:joda-time:2.10.1'
    implementation 'com.android.volley:volley:1.1.1'
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'org.apache.commons:commons-text:1.6'
    implementation 'com.github.bumptech.glide:glide:4.8.0'
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-android.pro'
            minifyEnabled true
            shrinkResources true
        }
    }

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28
    }

    lintOptions {
        warningsAsErrors false
        abortOnError false
        ignore 'InvalidPackage', 'RtlHardcoded', 'UnusedAttribute'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    applicationVariants.all { variant ->
        task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
            options.tags = ["attr"]
            source = variant.javaCompile.source

            println '=== source ==='
            source.collect { relativePath(it) }.sort().each { println it }

            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            classpath += files(variant.javaCompile.classpath.files)

            println '=== classpath ==='
            classpath.collect { relativePath(it) }.sort().each { println it }

            destinationDir = file("build/outputs/docs/javadoc/")
            title = rootProject.name
            failOnError false
        }
    }
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == "com.android.support") {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion "26.+"
            }
        }
    }
}
